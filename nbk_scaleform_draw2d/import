imports = function()
	if GetResourceState("nbk_scaleform_draw2d") ~= "started" then 
		error("Resource: nbk_scaleform_draw2d Not Loaded Yet!",2)
	else
		
		
		local drawelements = {}
		AddEventHandler('onResourceStop', function(resourceName)
		  if (GetCurrentResourceName() ~= resourceName) then
			return
		  end
		  for i,v in pairs(drawelements) do 
			 v(i)
		  end 
		end)
		
		
		local handle,thisnamespace = exports['nbk_scaleform_draw2d']:GetGlobalHandle()
		local GetNameSpace = function()
			local r = thisnamespace --GetIdOfThisThread()
			
			return r 
		end 
		if not handle then return end 
		local actions = {
			["numberinteger"] = ScaleformMovieMethodAddParamInt,
			["numberfloat"] = ScaleformMovieMethodAddParamFloat,
			["string"] = ScaleformMovieMethodAddParamTextureNameString,
			["boolean"] = ScaleformMovieMethodAddParamBool
		}
		local _sendscaleformvalues = function (...)
			local tb = {...}
			PushScaleformMovieFunction(handle,tb[1])
			local iscb,cb,cbtype = false , {}
			for i=2,#tb do
				local p = tb[i]
				local action_pre = type(p)
				if action_pre == 'function' or action_pre == 'table' then 
					table.insert(cb,p) 
					if type(tb[#tb]) == 'function' then 
						cbtype = 'empty'
					else 
						cbtype = tb[#tb]
					end 
					table.remove(tb,#tb)
					iscb = true
				else 
					local action = action_pre == "number" and action_pre .. math.type(p) or action_pre
					if actions[action] == nil then action = "string" end 
					
					actions[action](p)
				end 
			end 
			if iscb then 
				local value = EndScaleformMovieMethodReturn()
				CreateThread(function()
					local maxtemp = 5000;
					repeat
						if (IsScaleformMovieMethodReturnValueReady(value)) then
							cbtypes = {}
							if cbtype then 
								if string.find(cbtype,'bool') then cbtype = 'boolean'   
								elseif string.find(cbtype,'int') then cbtype = 'number'  
								elseif string.find(cbtype,'str') then cbtype = 'string' 
								else cbtype = 'boolean' end 
								
								cbtypes['number'] = GetScaleformMovieMethodReturnValueInt;
								cbtypes['string'] = GetScaleformMovieMethodReturnValueString;
								cbtypes['boolean'] = GetScaleformMovieMethodReturnValueBool;
								local result = cbtypes[cbtype](value)
								for i,v in pairs(cb) do 
									v(result)
								end 
								break
							end 
						end
						maxtemp = maxtemp - 1
						Wait(0)
					until maxtemp <= 0
				end)
			else 
				PopScaleformMovieFunctionVoid()
			end 
		end
		local currentresourceindex = 0
		local currentresourcenamespaceindex = function(b) 
			local namespace = GetNameSpace()
			
			local r = namespace..":"..currentresourceindex
			currentresourceindex = currentresourceindex + 1
			if b then return currentresourceindex end 
		return r end 
		local isdrawing = {}
		local ishooking = false 
		local selectcbs = {}
		local isdebugmode = false
		DrawSelectionHook = function(bool,cb) 
			if bool == nil then bool = true end 
			ishooking = bool
			if bool then 
				local oldselection = "NULL"
				local callback = function(selection)
					if selection ~= oldselection then
						print('change from',oldselection,"to",selection)
						oldselection = selection
					end 
				end
				local thisSelection = "NULL";
				AddEventHandler('nbk_scaleform_draw2d:ClickCheckEvent', function()
					
				  if ishooking then 
						local on = {}
						print(thisSelection)
						if selectcbs[thisSelection] then selectcbs[thisSelection](on) end 
						if on.click then 
							on.click(thisSelection)
						end 
					end 
				end)
				
				
				CreateThread(function()
					local ishover = false ;
					while ishooking do 
						
						Wait(100)
						_sendscaleformvalues("GET_CURRENT_SELECTION",function(result)
							if result then 
								
								
								local info = json.decode(result)
								local selection = info[1]
								local mouseX = info[2]
								local mouseY = info[3]
								if selection then 
									thisSelection = selection;
									(cb or callback)({
										selection = selection,
										mouseX = mouseX,
										mouseY = mouseY
									});
									if selection ~= "NULL" then 
										if selectcbs[selection] then 
											local on = {}
											selectcbs[selection](on)
											if on.hover then 
												on.hover(selection)
												ishover = true 
											end 
											if selection ~= oldselection then 
												if on.unhover then 
													on.unhover(selection)
												end 
												oldselection = selection
											end 
										end 
									else 
										if selectcbs[oldselection] then 
											local on = {}
											selectcbs[oldselection](on)
											if selection ~= oldselection then 
												if on.unhover then 
													on.unhover(selection)
												end 
												oldselection = selection
											end 
										end 
									end 
								end 
								
							end 
						end,"string")
						
					end 
				end)
			end 
		end 
		DrawRectS = function(x, y, w, h, r, g, b, a, ...)
			
			local namespacedindex = currentresourcenamespaceindex() 
			local iscb = false 
			local opt = {...} 
			local lastopt = opt[#opt]
			if type(lastopt) == 'function' then 
				local selectcb = lastopt 
				selectcbs[namespacedindex] = selectcb
				table.remove(opt,#opt)
				iscb = true 
			end 
			if namespacedindex:len() > 40 then error("namespace or id too long (max:40) :"..namespacedindex:len(),1) return end
			_sendscaleformvalues("DRAW_RECT", namespacedindex, x, y, w, h, r, g, b, a, iscb, table.unpack(opt))
			isdrawing[namespacedindex] = true
			drawelements[namespacedindex] = DeleteRectS
			return namespacedindex
		end 
		DrawCircleS = function(x, y, radius, r, g, b, a, ...)
			
			local namespacedindex = currentresourcenamespaceindex() 
			local iscb = false 
			local opt = {...} 
			local lastopt = opt[#opt]
			if type(lastopt) == 'function' then 
				local selectcb = lastopt 
				selectcbs[namespacedindex] = selectcb
				table.remove(opt,#opt)
				iscb = true 
			end 
			if namespacedindex:len() > 40 then error("namespace or id too long (max:40) :"..namespacedindex:len(),1) return end
			_sendscaleformvalues("DRAW_CIRCLE", namespacedindex,x, y, radius, r, g, b, a, iscb, table.unpack(opt))
			isdrawing[namespacedindex] = true
			drawelements[namespacedindex] = DeleteCircleS
			return namespacedindex
		end 
		DrawSpriteS = function(txd, txn, x, y, w, h,heading, r, g, b, a, ...) --Call directly, no need to RequestStreamedTextureDict
			
			local namespacedindex = currentresourcenamespaceindex()
			local iscb = false 
			local opt = {...} 
			local lastopt = opt[#opt]
			if type(lastopt) == 'function' then 
				local selectcb = lastopt 
				selectcbs[namespacedindex] = selectcb
				table.remove(opt,#opt)
				iscb = true 
			end 
			if namespacedindex:len() > 40 then error("namespace or id too long (max:40) :"..namespacedindex:len(),1) return end
			_sendscaleformvalues("DRAW_SPRITE", namespacedindex, txd, txn, x, y, w, h,heading, r, g, b, a, iscb, table.unpack(opt))
			isdrawing[namespacedindex] = true
			drawelements[namespacedindex] = DeleteSpriteS
			return namespacedindex
		end 
		DrawPageS = function(file, x, y, w, h,heading, r, g, b, a, ...)  --Call directly, no need to RequestStreamedTextureDict 
			
			local namespacedindex = currentresourcenamespaceindex()
			local iscb = false 
			local opt = {...} 
			local lastopt = opt[#opt]
			if type(lastopt) == 'function' then 
				local selectcb = lastopt 
				selectcbs[namespacedindex] = selectcb
				table.remove(opt,#opt)
				iscb = true 
			end 
			if namespacedindex:len() > 40 then error("namespace or id too long (max:40) :"..namespacedindex:len(),1) return end
			_sendscaleformvalues("DRAW_PAGE", namespacedindex, file, x, y, w, h,heading, r, g, b, a, iscb, table.unpack(opt)) 
			isdrawing[namespacedindex] = true
			drawelements[namespacedindex] = DeletePageS
			return namespacedindex
		end 
		DrawTextS = function(str, x, y, scale, r, g, b, a, ...)
			
			local namespacedindex = currentresourcenamespaceindex()
			local iscb = false 
			local opt = {...} 
			local lastopt = opt[#opt]
			if type(lastopt) == 'function' then 
				local selectcb = lastopt 
				selectcbs[namespacedindex] = selectcb
				table.remove(opt,#opt)
				iscb = true 
			end 
			if namespacedindex:len() > 40 then error("namespace or id too long (max:40) :"..namespacedindex:len(),1) return end
			_sendscaleformvalues("DRAW_TEXT", namespacedindex, str, x, y, scale, r, g, b, a, iscb, table.unpack(opt))
			isdrawing[namespacedindex] = true
			drawelements[namespacedindex] = DeleteTextS
			return namespacedindex
		end
		DrawCursor = function(b)
			_sendscaleformvalues("SHOW_CURSOR", b)
		end
		DrawCursorState = function(state)
			_sendscaleformvalues("SET_CURSOR_STATE", state)
		end
		
		DrawCursorS = DrawCursor
		DeleteRectS = function(namespacedindex)
			_sendscaleformvalues("DELETE_RECT", namespacedindex)
			selectcbs[namespacedindex] = nil
			isdrawing[namespacedindex] = nil
		end 
		DeleteCircleS = function(namespacedindex)
			_sendscaleformvalues("DELETE_CIRCLE", namespacedindex)
			selectcbs[namespacedindex] = nil
			isdrawing[namespacedindex] = nil
		end 
		DeleteSpriteS = function(namespacedindex)
			_sendscaleformvalues("DELETE_SPRITE", namespacedindex)
			selectcbs[namespacedindex] = nil
			isdrawing[namespacedindex] = nil
		end 
		DeletePageS = function(namespacedindex)
			print('deletepage')
			_sendscaleformvalues("DELETE_PAGE", namespacedindex)
			selectcbs[namespacedindex] = nil
			isdrawing[namespacedindex] = nil
		end 
		DeleteTextS = function(namespacedindex)
			_sendscaleformvalues("DELETE_TEXT", namespacedindex)
			selectcbs[namespacedindex] = nil
			isdrawing[namespacedindex] = nil
		end 
		DrawRectSF = function(forcename, x, y, w, h, r, g, b, a, ...)
			local namespace = GetNameSpace()
			
			local namespacedindex = namespace..":"..forcename
			local iscb = false 
			local opt = {...} 
			local lastopt = opt[#opt]
			if type(lastopt) == 'function' then 
				local selectcb = lastopt 
				selectcbs[namespacedindex] = selectcb
				table.remove(opt,#opt)
				iscb = true 
			end 
			if namespacedindex:len() > 40 then error("namespace or id too long (max:40) :"..namespacedindex:len(),1) return end
			_sendscaleformvalues("DRAW_RECT", namespacedindex, x, y, w, h, r, g, b, a, iscb, table.unpack(opt))
			isdrawing[namespacedindex] = true
			drawelements[namespacedindex] = DeleteRectSF
			return namespacedindex
		end 
		DrawCircleSF = function(forcename, x, y, radius, r, g, b, a, ...)
			local namespace = GetNameSpace()
			
			local namespacedindex = namespace..":"..forcename
			local iscb = false 
			local opt = {...} 
			local lastopt = opt[#opt]
			if type(lastopt) == 'function' then 
				local selectcb = lastopt 
				selectcbs[namespacedindex] = selectcb
				table.remove(opt,#opt)
				iscb = true 
			end 
			if namespacedindex:len() > 40 then error("namespace or id too long (max:40) :"..namespacedindex:len(),1) return end
			_sendscaleformvalues("DRAW_CIRCLE", namespacedindex, x, y, radius, r, g, b, a, iscb, table.unpack(opt))
			isdrawing[namespacedindex] = true
			drawelements[namespacedindex] = DeleteCircleSF
			return namespacedindex
		end 
		DrawSpriteSF = function(forcename, txd, txn, x, y, w, h,heading, r, g, b, a, ...) --Call directly, no need to RequestStreamedTextureDict 
			local namespace = GetNameSpace()
			
			local namespacedindex = namespace..":"..forcename
			local iscb = false 
			local opt = {...} 
			local lastopt = opt[#opt]
			if type(lastopt) == 'function' then 
				local selectcb = lastopt 
				selectcbs[namespacedindex] = selectcb
				table.remove(opt,#opt)
				iscb = true
			end 
			
			if namespacedindex:len() > 40 then error("namespace or id too long (max:40) :"..namespacedindex:len(),1) return end
			_sendscaleformvalues("DRAW_SPRITE", namespacedindex, txd, txn, x, y, w, h,heading, r, g, b, a, iscb, table.unpack(opt))
			isdrawing[namespacedindex] = true
			drawelements[namespacedindex] = DeleteSpriteSF
			return namespacedindex
		end 
		DrawPageSF = function(forcename, file, x, y, w, h,heading, r, g, b, a, ...)  --Call directly, no need to RequestStreamedTextureDict 
			local namespace = GetNameSpace()
			
			local namespacedindex = namespace..":"..forcename
			local iscb = false 
			local opt = {...} 
			local lastopt = opt[#opt]
			if type(lastopt) == 'function' then 
				local selectcb = lastopt 
				selectcbs[namespacedindex] = selectcb
				table.remove(opt,#opt)
				iscb = true
			end 
			if namespacedindex:len() > 40 then error("namespace or id too long (max:40) :"..namespacedindex:len(),1) return end
			_sendscaleformvalues("DRAW_PAGE", namespacedindex, file, x, y, w, h,heading, r, g, b, a, iscb, table.unpack(opt)) 
			isdrawing[namespacedindex] = true
			drawelements[namespacedindex] = DeletePageSF
			return namespacedindex
		end 
		DrawTextSF = function(forcename, str, x, y, scale, r, g, b, a, ...)
			local namespace = GetNameSpace()
			
			local namespacedindex = namespace..":"..forcename
			local iscb = false 
			local opt = {...} 
			local lastopt = opt[#opt]
			if type(lastopt) == 'function' then 
				local selectcb = lastopt 
				selectcbs[namespacedindex] = selectcb
				table.remove(opt,#opt)
				iscb = true
			end 
			if namespacedindex:len() > 40 then error("namespace or id too long (max:40) :"..namespacedindex:len(),1) return end
			_sendscaleformvalues("DRAW_TEXT", namespacedindex, str, x, y, scale, r, g, b, a, iscb, table.unpack(opt))
			isdrawing[namespacedindex] = true
			drawelements[namespacedindex] = DeleteTextSF
			return namespacedindex
		end
		UpdateTextSF = DrawTextSF
		DeleteRectSF = DeleteRectS
		DeleteSpriteSF = DeleteSpriteS
		DeletePageSF = DeletePageS
		DeleteTextSF = DeleteTextS
		DeleteCircleSF = DeleteCircleS
		
		IsDrawingS = function(namespacedindex)
			if namespacedindex == nil then return false end 
			return not ( isdrawing[namespacedindex] == nil)
		end 
		IsDrawingSF = IsDrawingS
		TEXTDRAW_MAPS = function(x,...) 
			return function(...)
				return _sendscaleformvalues(x, ...)
			end 
		end 
		SetFadeInBegin = TEXTDRAW_MAPS("SET_FADE_IN_BEGIN",fadegroup,inspeed, outspeed, isshort, shortduration)
		SetFadeInEnd = TEXTDRAW_MAPS("SET_FADE_IN_END")
		SetFadeInShow = TEXTDRAW_MAPS("SET_FADE_IN_SHOW",fadegroup)
		SetFadeOut = TEXTDRAW_MAPS("SET_FADE_OUT",fadegroup)
		SetAutoColourBegin = TEXTDRAW_MAPS("SET_AUTO_COLOUR_BEGIN",speed)
		SetAutoColourEnd = TEXTDRAW_MAPS("SET_AUTO_COLOUR_END")
		SetHoverColourBegin = TEXTDRAW_MAPS("SET_HOVER_COLOUR_BEGIN",r,g,b,a)
		SetHoverColourEnd = TEXTDRAW_MAPS("SET_HOVER_COLOUR_END")
		
		SetDebugMode = function(enable)
				isdebugmode = enable 
				CreateThread(
					function()
						while isdebugmode do 
						Wait(100)
						_sendscaleformvalues("GET_DEBUG_SELECTION",function(result)
							if result then 
								print(result)
							end 
						end,"string")
					
					end 
				end)
			
		end 
		TextDrawShow = TEXTDRAW_MAPS("SET_TEXT_SHOW",namespacedindex) 
		TextDrawHide = TEXTDRAW_MAPS("SET_TEXT_HIDE",namespacedindex) 
		TextDrawPosition = TEXTDRAW_MAPS("SET_TEXT_POSITION",namespacedindex,x,y)
		TextDrawSetPosition = TextDrawPosition
		TextDrawString = TEXTDRAW_MAPS("SET_TEXT_STRING",namespacedindex, str)
		TextDrawSetString = TextDrawString
		TextDrawColor = TEXTDRAW_MAPS("SET_TEXT_COLOUR",namespacedindex, r, g, b, a) 
		TextDrawAlpha = TEXTDRAW_MAPS("SET_TEXT_ALPHA",namespacedindex, alpha)  
		TextDrawTextScale = TEXTDRAW_MAPS("SET_TEXT_SCALE",namespacedindex, scale)  
		TextDrawTextSize = TextDrawTextScale
		TextDrawFont = TEXTDRAW_MAPS("SET_TEXT_FONT",namespacedindex, fontstr) 
		TextDrawBoxColour = TEXTDRAW_MAPS("SET_TEXT_BOX_COLOUR",namespacedindex, r, g, b, a) 
		TextDrawOutline = TEXTDRAW_MAPS("SET_TEXT_OUTLINE",namespacedindex, isoutline)
		TextDrawShadow = TEXTDRAW_MAPS("SET_TEXT_SHADOW",namespacedindex,  r, g, b, a, blurX, blurY, strength) 
		TextDrawCenter = TEXTDRAW_MAPS("SET_TEXT_CENTER",namespacedindex, iscenter) 
		TextDrawRight = TEXTDRAW_MAPS("SET_TEXT_RIGHT",namespacedindex, isright) 
		TextDrawWrap = TEXTDRAW_MAPS("SET_TEXT_WRAP",namespacedindex, l, r) 
		TextDrawDestroy = DeleteTextS 
		TextDrawCreate = function(str, x, y, scale, r, g, b, a)
			local h = DrawTextS(str, x, y, scale, r, g, b, a)
			TextDrawHide(h)
			return h 
		end
	end
end 
if GetCurrentResourceName() ~= "nbk_scaleform_draw2d" then
	imports() 
else 
	InitExample = imports
end 